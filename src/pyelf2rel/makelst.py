from __future__ import annotations

from argparse import ArgumentError, ArgumentParser
from typing import TYPE_CHECKING

from elftools.elf.constants import SHN_INDICES
from elftools.elf.elffile import ELFFile
from elftools.elf.enums import ENUM_ST_INFO_BIND

from pyelf2rel.elf import read_symbols
from pyelf2rel.lst import encode_lst
from pyelf2rel.rel import RelSymbol

if TYPE_CHECKING:
    from typing import BinaryIO


def load_elf(module_id: int, file: BinaryIO) -> str:
    """Creates an LST map of the symbols in an ELF file

    Returns the LST text and the list of symbols defined"""

    plf = ELFFile(file)
    symbols = read_symbols(file, plf)

    rel_symbols = [
        RelSymbol(module_id, sym.st_shndx, sym.st_value, sym.name)
        for sym in symbols
        if (
            sym.name != ""
            and sym.st_bind == ENUM_ST_INFO_BIND["STB_GLOBAL"]
            and sym.st_shndx != SHN_INDICES.SHN_UNDEF
        )
    ]

    return encode_lst(rel_symbols)


def main():
    parser = ArgumentParser()
    parser.add_argument("lst_path", type=str, help="Output lst path")
    arg_elf = parser.add_argument(
        "--elf", type=str, nargs="+", help="Input module id and elf path pairs", default=[]
    )
    parser.add_argument("--lst", type=str, nargs="+", help="Input lst paths", default=[])
    args = parser.parse_args()

    if len(args.elf or []) % 2 != 0:
        raise ArgumentError(arg_elf, "Inputs require a module id and path for each entry")

    def pairwise(seq: list):
        return zip(*[iter(seq)] * 2)

    txts = []

    for module_id, elf_path in pairwise(args.elf):
        with open(elf_path, "rb") as f:
            txt = load_elf(module_id, f)
        txts.append((elf_path, txt))

    for lst_path in args.lst:
        with open(lst_path) as f:
            txt = f.read()
        txts.append((lst_path, txt))

    with open(args.lst_path, "w") as f:
        f.write("// Generated by makelst, don't edit manually\n\n")
        f.write("\n\n".join(f"//\n// File: {path}\n//\n\n" + txt for path, txt in txts))


if __name__ == "__main__":
    main()
